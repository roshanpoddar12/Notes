createdAt: "2020-07-27T02:19:13.197Z"
updatedAt: "2020-07-27T02:31:59.255Z"
type: "MARKDOWN_NOTE"
folder: "45d4ab443987fc5aabe5"
title: "3.TWO TIER APPLICATION"
tags: []
content: '''
  # 3.TWO TIER APPLICATION
  
  - Two tier application involves client and server.
  - The client contains the user interface and the buisseness logic in one machine 
  - The backend server the database server might be running on different mach
   ![2tier.jpeg](:storage/739d4f48-0915-4975-8424-91f4ae85d97e/2b75cef4.jpeg)
  - Why the need for two-tier applications? Why not host the business logic on a different machine & have control over it?
  - Also, again isn’t the application code vulnerable to being accessed by a third person?
  
  # The Need For Two Tier Application 
  - Well, yes!! But there are use cases where two-tier applications come in handy, for instance, a to-do list app or a similar planner or a productivity app.
  - In these scenarios, it won’t cause the business significant harm, even if the code is accessed by a third person. On the contrary, the upside is since the code & the user interface reside in the same machine, there are fewer network calls to the backend server which keeps the latency of the application low.
  
  - The application makes a call to the database server, only when the user has finished creating his to-do list & wants to persist the changes.
  
  - Another good example of this is the online browser & app-based games. The game files are pretty heavy, they get downloaded on the client just once when the user uses the application for the first time. Moreover, they make the network calls only to keep the game state persistent.
  
  - Also, fewer server calls mean less money to be spent on the servers which is naturally economical.
'''
linesHighlighted: []
isStarred: false
isTrashed: false
