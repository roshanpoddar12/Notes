createdAt: "2020-06-16T14:48:54.812Z"
updatedAt: "2020-06-16T14:49:17.598Z"
type: "MARKDOWN_NOTE"
folder: "c19e83a1679ed0fb1302"
title: "CALL , APPLY , BIND"
tags: []
content: '''
  # CALL , APPLY , BIND
  ```js
  var john = {
      name: 'John',
      age: 26,
      job: 'teacher',
      presentation: function(style, timeOfDay) {
          if (style === 'formal') {
              console.log('Good ' + timeOfDay + ', Ladies and gentlemen! I\\'m ' +  this.name + ', I\\'m a ' + this.job + ' and I\\'m ' + this.age + ' years old.');
          } else if (style === 'friendly') {
              console.log('Hey! What\\'s up? I\\'m ' +  this.name + ', I\\'m a ' + this.job + ' and I\\'m ' + this.age + ' years old. Have a nice ' + timeOfDay + '.');
          }
      }
  };
  
  var emily = {
      name: 'Emily',
      age: 35,
      job: 'designer'
  };
  
  john.presentation('formal', 'morning');
  //Call
  //call method allows us to set this variable here in the first argument
  john.presentation.call(emily, 'friendly', 'afternoon');
  //There is a very similar method called apply. the only difference is that it accepts the arguments as an array
  //john.presentation.apply(emily, ['friendly', 'afternoon']); //in this it is not gona work because it is not expecting an array
  //Bind is also similar to call it also allows to set this variable explicitly.
  //Difference: Bind doesnot immediately call function but instead generate copy of the function so it can store it somewhere
  var johnFriendly = john.presentation.bind(john, 'friendly');
  
  johnFriendly('morning');
  johnFriendly('night');
  // bind allows us to preset some arguments here .This is also called currying .Currying is just a technique in which we create a function based on another function but with some preset parameters
  var emilyFormal = john.presentation.bind(emily, 'formal');
  emilyFormal('afternoon');
  
  
  // Another cool example
  var years = [1990, 1965, 1937, 2005, 1998];
  
  function arrayCalc(arr, fn) {
      var arrRes = [];
      for (var i = 0; i < arr.length; i++) {
          arrRes.push(fn(arr[i]));
      }
      return arrRes;
  }
  
  function calculateAge(el) {
      return 2016 - el;
  }
  
  function isFullAge(limit, el) {
      return el >= limit;
  }
  
  var ages = arrayCalc(years, calculateAge);
  var fullJapan = arrayCalc(ages, isFullAge.bind(this, 20));
  console.log(ages);
  console.log(fullJapan);
  ```
'''
linesHighlighted: []
isStarred: false
isTrashed: false
