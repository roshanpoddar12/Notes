createdAt: "2020-04-11T23:07:06.326Z"
updatedAt: "2020-06-18T04:16:35.758Z"
type: "MARKDOWN_NOTE"
folder: "5a0c8d8f45a5e708fc1e"
title: "7.Arrow"
tags: []
content: '''
  # 7.Arrow
  ## What is arrow function?
  
  ## Advantages
  - The biggest advantage of using arrow function is that it shares the surrounding this keyword.
  - unlike normal function arrow function dont get their own this keyword.
  - They simply use this keyword of the function they are written in.so we say they have a lexical this variable.
  ```js 
  // Lecture: Arrow functions
  
  
  const years = [1990, 1965, 1982, 1937];
  
  // ES5
  var ages5 = years.map(function(el) {
      return 2016 - el;
  });
  console.log(ages5);
  
  
  // ES6
  let ages6 = years.map(el => 2016 - el); // because here is only one parameter we are
  //passing to arrow function so we dont need paranthesis
  console.log(ages6);
  
  ages6 = years.map((el, index) => `Age element ${index + 1}: ${2016 - el}.`); //Here we are passing 2
  //parameters so we need ().
  console.log(ages6);
  
  ages6 = years.map((el, index) => {
      const now = new Date().getFullYear();
      const age = now - el;
      return `Age element ${index + 1}: ${age}.`
  });
  console.log(ages6);
  
  // ES5
  var box5 = {
      color: 'green',
      position: 1,
      clickMe: function() {//function attached to the object inside this function 
      //we can acess the color and position value
         
         document.querySelector('.green').addEventListener('click', function() {    //this  callback function in listener is not a method is the regular function call therefor this keyword here 4
         //doesnot point to this box5 object but instead it points to window object.
              var str = 'This is box number ' + this.position + ' and it is ' + this.color;
              alert(str);
          });
      }
  }
  //box5.clickMe();
  //o/p this will through an error because as we discussed earlier that only 
  //in a method call this keyword actually points to that object but in regular 
  //function call this keyword always points to the global object.
  //As in this example "see i n code"
  //a very common pattern to avoid this is to simplt create a new variable and store this,
  
  // ES5
  var box5 = {
      color: 'green',
      position: 1,
      clickMe: function() {
         
         var self = this;  //this is the line we have added
         document.querySelector('.green').addEventListener('click', function() {
              var str = 'This is box number ' + self.position + ' and it is ' + self.color;
              alert(str);
          });
      }
  }
  //box5.clickMe();
  
  // ES6
  const box6 = {
      color: 'green',
      position: 1,
      clickMe: function() {
          document.querySelector('.green').addEventListener('click', () => {
              var str = 'This is box number ' + this.position + ' and it is ' + this.color;
              alert(str);
          });
      }
  }
  box6.clickMe();
  
  const box66 = {
      color: 'green',
      position: 1,
      clickMe: () => { //This again share the this keyword of surroundings and the surrounding is global .
          document.querySelector('.green').addEventListener('click', () => {
              var str = 'This is box number ' + this.position + ' and it is ' + this.color;
              alert(str);
          });
      }
  }
  box66.clickMe();
  //This will again print undefined because see in code
  function Person(name) {
      this.name = name;
  }
  
  // ES5
  Person.prototype.myFriends5 = function(friends) { //in here we have access to 
  //this variable and this points to the name of the person and it would be 
  //john but the thing is in map we have called a another function so this
  //keyword in that anonymous function is not going to point to the object
  //instead it is going to point to the global object.
      
      var arr = friends.map(function(el) {
         return this.name + ' is friends with ' + el; 
      }.bind(this)); //So we have used bind to get acces to this keyword
      
      console.log(arr);
  }
  
  var friends = ['Bob', 'Jane', 'Mark'];
  new Person('John').myFriends5(friends);
  
  //name is not defined 
  
  // ES6
  Person.prototype.myFriends6 = function(friends) {
  
      var arr = friends.map(el => `${this.name} is friends with ${el}`);
  
      console.log(arr);
  }
  
  new Person('Mike').myFriends6(friends);
  ```
'''
linesHighlighted: []
isStarred: false
isTrashed: false
