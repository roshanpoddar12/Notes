createdAt: "2020-08-09T18:48:32.110Z"
updatedAt: "2020-08-10T06:51:50.743Z"
type: "MARKDOWN_NOTE"
folder: "bb27586f835afacb8550"
title: "INTERSECTION POINT OF TWO LINK LIST"
tags: []
content: '''
  # INTERSECTION POINT OF TWO LINK LIST
  - Method 1(Simply use two loops)
    - Use 2 nested for loops. The outer loop will be for each node of the 1st list and inner loop will be for 2nd list. In the inner loop, check if any of nodes of the 2nd list is same as the current node of the first linked list. The time complexity of this method will be O(M * N) where m and n are the numbers of nodes in two lists.
  
  - Method 2 (Mark Visited Nodes)
    - This solution requires modifications to basic linked list data structure. Have a visited flag with each node. Traverse the first linked list and keep marking visited nodes. Now traverse the second linked list, If you see a visited node again then there is an intersection point, return the intersecting node. This solution works in O(m+n) but requires additional information with each node. A variation of this solution that doesn’t require modification to the basic data structure can be implemented using a hash. Traverse the first linked list and store the addresses of visited nodes in a hash. Now traverse the second linked list and if you see an address that already exists in the hash then return the intersecting node.
  
  - Method 3(Using difference of node counts)
    - Get count of the nodes in the first list, let count be c1.
    - Get count of the nodes in the second list, let count be c2.
    - Get the difference of counts d = abs(c1 – c2)
    - Now traverse the bigger list from the first node till d nodes so that from here onwards both the lists have equal no of nodes.
    - Then we can traverse both the lists in parallel till we come across a common node. (Note that getting a common node is done by comparing the address of the nodes)
  
  ```c++
  #include <bits/stdc++.h> 
  using namespace std; 
    
  /* Link list node */
  class Node { 
  public: 
      int data; 
      Node* next; 
  }; 
    
  /* Function to get the counts of node in a linked list */
  int getCount(Node* head); 
    
  /* function to get the intersection point of two linked  
  lists head1 and head2 where head1 has d more nodes than  
  head2 */
  int _getIntesectionNode(int d, Node* head1, Node* head2); 
    
  /* function to get the intersection point of two linked  
  lists head1 and head2 */
  int getIntesectionNode(Node* head1, Node* head2) 
  { 
    
      // Count the number of nodes in 
      // both the linked list 
      int c1 = getCount(head1); 
      int c2 = getCount(head2); 
      int d; 
    
      // If first is greater 
      if (c1 > c2) { 
          d = c1 - c2; 
          return _getIntesectionNode(d, head1, head2); 
      } 
      else { 
          d = c2 - c1; 
          return _getIntesectionNode(d, head2, head1); 
      } 
  } 
    
  /* function to get the intersection point of two linked  
  lists head1 and head2 where head1 has d more nodes than  
  head2 */
  int _getIntesectionNode(int d, Node* head1, Node* head2) 
  { 
      // Stand at the starting of the bigger list 
      Node* current1 = head1; 
      Node* current2 = head2; 
    
      // Move the pointer forward 
      for (int i = 0; i < d; i++) { 
          if (current1 == NULL) { 
              return -1; 
          } 
          current1 = current1->next; 
      } 
    
      // Move both pointers of both list till they 
      // intersect with each other 
      while (current1 != NULL && current2 != NULL) { 
          if (current1 == current2) 
              return current1->data; 
    
          // Move both the pointers forward 
          current1 = current1->next; 
          current2 = current2->next; 
      } 
    
      return -1; 
  } 
    
  /* Takes head pointer of the linked list and  
  returns the count of nodes in the list */
  int getCount(Node* head) 
  { 
      Node* current = head; 
    
      // Counter to store count of nodes 
      int count = 0; 
    
      // Iterate till NULL 
      while (current != NULL) { 
    
          // Increase the counter 
          count++; 
    
          // Move the Node ahead 
          current = current->next; 
      } 
    
      return count; 
  } 
    
  // Driver Code 
  int main() 
  { 
      /*  
          Create two linked lists  
        
          1st 3->6->9->15->30  
          2nd 10->15->30  
        
          15 is the intersection point  
      */
    
      Node* newNode; 
    
      // Addition of new nodes 
      Node* head1 = new Node(); 
      head1->data = 10; 
    
      Node* head2 = new Node(); 
      head2->data = 3; 
    
      newNode = new Node(); 
      newNode->data = 6; 
      head2->next = newNode; 
    
      newNode = new Node(); 
      newNode->data = 9; 
      head2->next->next = newNode; 
    
      newNode = new Node(); 
      newNode->data = 15; 
      head1->next = newNode; 
      head2->next->next->next = newNode; 
    
      newNode = new Node(); 
      newNode->data = 30; 
      head1->next->next = newNode; 
    
      head1->next->next->next = NULL; 
    
      cout << "The node of intersection is " << getIntesectionNode(head1, head2); 
      
  } 
    
  // Time Complexity : O(m+n)
  // Space Complexity : O(1)
  ```
  
  Easiest way: Go on looping through the link list at some point it will intersect .If there is no intersection then it will come out of the while loop when the l1 and l2 both is eqauls to NULL
  ```c++
  class Solution {
  public:
      ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
          ListNode *l1 = headA, *l2 = headB;
          if(l1==NULL || l2==NULL) return NULL;
          
          while(l1!=l2){
              l1=l1->next;
              l2=l2->next;
               if(l1 == l2)
                   return l1;
              if(l1==NULL)
                  l1 = headA;
              if(l2==NULL)
                  l2=headB;
              
          }
          return l1;
      }
  }; 
  //Time Complexity : O( LCM( len(a),len(b) ) )
  ```
'''
linesHighlighted: []
isStarred: false
isTrashed: false
