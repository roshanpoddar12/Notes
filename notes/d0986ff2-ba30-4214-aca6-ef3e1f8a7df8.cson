createdAt: "2020-08-11T06:01:49.210Z"
updatedAt: "2020-08-11T06:02:10.607Z"
type: "MARKDOWN_NOTE"
folder: "bb27586f835afacb8550"
title: "DELETING LOOP IN LINKLIST copy"
content: '''
  # DELETING LOOP IN LINKLIST
  
  ```C++
  /**
   * Definition for singly-linked list.
   * struct ListNode {
   *     int val;
   *     ListNode *next;
   *     ListNode(int x) : val(x), next(NULL) {}
   * };
   */
  class Solution {
  public:
      ListNode *detectCycle(ListNode *head) {
          ListNode *fast = head;
          ListNode *slow = head;
          //Checking if loop exists or not
          while(fast!=NULL && fast->next!=NULL){
              fast=fast->next->next;
              slow=slow->next;
              //If loop exists find the starting point
              if(fast==slow){
                  slow=head;
                  //while finding the starting point store the prev node 
                  while(slow!=fast){
                      prev = fast;
                      slow=slow->next;
                      fast=fast->next;
                  }
                  return slow;
              }
          }
          return NULL;
      }
  };
  ```
  ```c++
  Node slow, fast, start;
  fast = slow = head;
  
  //PART I - Detect if a loop exists
  while (true)
  {
      // fast will always fall off the end of the list if it is linear
      if (fast == null || fast.next == null)
      {
          // no loop
          return;
      }
      else if (fast == slow || fast.next == slow)
      {
          // detected a loop
          break;
      }
      else
      {
          fast = fast.next.next; // move 2 nodes at at time
          slow = slow.next; // move 1 node at a time
      }
  }
  
  //PART II - Identify the node that is the start of the loop
  fast = head; //reset one of the references to head of list
  
  //until both the references are one short of the common element which is the start of the loop
  while(fast.next != slow.next) 
  {
      fast = fast.next;
      slow = slow.next;
  }
  start = fast.next;
  
  //PART III - Eliminate the loop by setting the 'next' pointer 
  //of the last element to null
  fast = start;
  while(fast.next != start)
  {
      fast = fast.next;
  }
  
  fast.next = null; //break the loop
  
  ```
'''
linesHighlighted: []
tags: []
isStarred: false
isTrashed: true
