createdAt: "2020-05-15T03:13:25.914Z"
updatedAt: "2021-01-30T13:14:24.392Z"
type: "MARKDOWN_NOTE"
folder: "9980a104cbe4399cdfd6"
title: "6.PROTECTING TOUR ROUTE"
tags: []
content: '''
  # 6.PROTECTING TOUR ROUTE
  
  - We will make a middleware before alltours or any route named as protect
  - In middlewarw we will check 4 things
  1. Getting token and check of its there
  2. Verification token
  3. Check if user still exists
  4. Check if user changed the password after the token was issued
  
  - To send a JWT as a token there is actually a standard method.
  - We should always use a header called authorization and the value should start with bearer then the token i eill look somethinh like:
  ```json
  {
    authorization:Bearer cnbshbefbrekrghkgoi
  }
  ```
  - 1st step here is getting the token and check if it exists or not
    - So common practice is to send it with http header with the request
  ```js
  //authcontroller.js                                                                                                             
  exports.protect = catchAsync(async (req, res, next) => {
    // 1) Getting token and check of it's there
    let token;
    if (
      req.headers.authorization &&
      req.headers.authorization.startsWith('Bearer')
    ) {
      token = req.headers.authorization.split(' ')[1];
    }
  
    if (!token) {
      return next(
        new AppError('You are not logged in! Please log in to get access.', 401)
      );
    }
  
    // 2) Verification token
    // Create a JWT error handler in error controller.js as a middleware
    // One more can be as TokenExpire error
    const decoded = await promisify(jwt.verify)(token, process.env.JWT_SECRET);
  
    // 3) Check if user still exists
    const currentUser = await User.findById(decoded.id);
    if (!currentUser) {
      return next(
        new AppError(
          'The user belonging to this token does no longer exist.',
          401
        )
      );
    }
  
    // 4) Check if user changed password after the token was issued
    // iat is basically issued at
    if (currentUser.changedPasswordAfter(decoded.iat)) {
      return next(
        new AppError('User recently changed password! Please log in again.', 401)
      );
    }
  
    // GRANT ACCESS TO PROTECTED ROUTE
    req.user = currentUser;
    next();
  });
  ```
  - Add a new field as password changed at so that we can check if the user has changed the password or not 
   ```js
   // usermodel.js
   passwordChangedAt: Date
  userSchema.methods.changedPasswordAfter = function(JWTTimestamp) {
    if (this.passwordChangedAt) {
      const changedTimestamp = parseInt(
        this.passwordChangedAt.getTime() / 1000,
        10
      );
  
      return JWTTimestamp < changedTimestamp;
    }
  
    // False means NOT changed
    return false;
  };
   ```
'''
linesHighlighted: []
isStarred: false
isTrashed: false
